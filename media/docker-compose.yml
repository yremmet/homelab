version: '3.5'

services:
 sonarr:
   container_name: sonarr
   environment:
    - PUID=1000
    - PGID=1000
    - TZ=$TZ
    - UMASK_SET=022
   volumes:
    - sonarr:/config
    - /mnt/media-nas/tv:/tv
    - /mnt/media/downloads:/downloads
   restart: unless-stopped
   image: linuxserver/sonarr
   networks:
    - proxy
   labels:
    - traefik.enable=true
    - traefik.http.routers.sonarr.rule=Host(`sonarr.$DOMAIN`)
    - traefik.http.routers.sonarr.middlewares=mediaheaders,authelia
    - traefik.http.routers.sonarr.tls.certresolver=myresolver
 prowlarr:
   image: lscr.io/linuxserver/prowlarr:develop
   container_name: prowlarr
   environment:
     - PUID=1000
     - PGID=1000
     - TZ=$TZ
   volumes:
     - prolarr:/config
   networks:
    - proxy
   labels:
   - traefik.enable=true
   - traefik.http.routers.prolarr.rule=Host(`prowlarr.$DOMAIN`)
   - traefik.http.routers.prolarr.middlewares=mediaheaders,basic@docker
   - traefik.http.routers.prolarr.tls.certresolver=myresolver
 radarr:
   image: linuxserver/radarr
   container_name: radarr
   volumes:
   - radarr:/config
   - /mnt/media-nas/movies:/movies
   - /mnt/media/downloads:/downloads
   restart: unless-stopped
   environment:
   - PUID=$D_UID
   - PGID=$D_GID
   - TZ=$TZ
   networks:
   - proxy
   labels:
    - traefik.enable=true
    - traefik.http.routers.radarr.rule=Host(`radarr.$DOMAIN`)
    - traefik.http.routers.radarr.middlewares=mediaheaders,authelia@docker
    - traefik.http.routers.radarr.tls.certresolver=myhttpchallenge
 ombi:
    image: linuxserver/ombi:latest
    container_name: ombi
    environment:
    - PUID=$D_UID
    - PGID=$D_GID
    - TZ=$TZ
    volumes:
      - ombi:/config
    ports:
      - 3579:3579
    labels:
    - traefik.enable=true
    - traefik.http.routers.radarr.rule=Host(`ombi.$DOMAIN`)
    - traefik.http.routers.radarr.middlewares=mediaheaders,authelia@docker
    - traefik.http.routers.radarr.tls.certresolver=myhttpchallenge
    restart: unless-stopped
volumes:
  ombi:
    driver: rclone:latest
    driver_opts:
      remote: 'storage-docker:/docker/nzb/ombi'
      allow_other: 'true'
      vfs_cache_mode: 'full'
  prolarr:
    driver: rclone:latest
    driver_opts:
      remote: 'storage-docker:/docker/nzb/prolarr'
      allow_other: 'true'
      vfs_cache_mode: 'full'
  sonarr:
    driver: rclone:latest
    driver_opts:
      remote: 'storage-docker:/docker/nzb/sonarr'
      allow_other: 'true'
      vfs_cache_mode: 'full'
  radarr:
    driver: rclone:latest
    driver_opts:
      remote: 'storage-docker:/docker/nzb/radarr'
      allow_other: 'true'
      vfs_cache_mode: 'full'
networks:
  proxy:
    external: true
